eureka:
  client:
    registryFetchIntervalSeconds: 5  # default 30
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka/
  instance:
    prefer-ip-address: true
    leaseRenewalIntervalInSeconds: 5  # default 30
    leaseExpirationDurationInSeconds: 10 # default 90

management:
  endpoints:
    web:
      exposure:
        include: health, shutdown
  endpoint:
    shutdown:
      enabled: true
    health:
      show-details: always
  health:
    circuitbreakers:
      enabled: true

resilience4j:
  circuitbreaker:
    instances:
      userServiceCircuitBreaker:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        failureRateThreshold: 50
        permittedNumberOfCallsInHalfOpenState: 3
        waitDurationInOpenState: 10s
        eventConsumerBufferSize: 10
        automaticTransitionFromOpenToHalfOpenEnabled: true
        slidingWindowType: COUNT_BASED
      gatewayLevelCircuitBreaker:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        failureRateThreshold: 50
        permittedNumberOfCallsInHalfOpenState: 3
        waitDurationInOpenState: 10s
        eventConsumerBufferSize: 10
        automaticTransitionFromOpenToHalfOpenEnabled: true
        slidingWindowType: COUNT_BASED
  retry:
    instances:
      userServiceRetry:
        maxAttempts: 3
        waitDuration: 2s
        intervalFunction:
          type: exponentialBackoff
          initialInterval: 2s
          multiplier: 2
          maxInterval: 5s
        retryExceptions:
          - org.springframework.web.client.HttpServerErrorException
          - java.io.IOException
        ignoreExceptions:
          - org.springframework.web.client.HttpClientErrorException$NotFound
#      gatewayLevelRetry:
#        maxAttempts: 3
#        waitDuration: 5s
#        exponentialBackoffMultiplier: 2
  rateLimiter:
    instances:
      userServiceRateLimiter:
        limitForPeriod: 1 # no. of calls that are allowed during the refresh period. 2 api allowed in 1 second
        limitRefreshPeriod: 2s # every given second time period refresh the limit
        timeoutDuration: 0 # how many milli seconds to wait if reach limit. 0 means no wait, immediately reject.
  bulkhead:
    instances:
      userServiceSemaphoreBulkhead:
        maxConcurrentCalls: 5 # How many concurrent calls are allowed
        maxWaitDuration: 500ms # How many milliseconds to wait if reach maxConcurrentCalls. 0 means no wait, immediately reject.
        fairCallHandling: true # Controls whether permits are granted in a FIFO (first-in-first-out) order
      userServiceThreadPoolBulkhead:
        coreThreadPoolSize: 10 # How many request execute immediately. These are always active threads.
        maxThreadPoolSize: 20 # How many more threads can be created if core threads are busy and queue is full.
        queueCapacity: 30 # How many requests can be queued when all core threads are busy.
        keepAliveDuration: 1000ms # How long the extra threads (created after core thread and queue full) are kept alive when idle.
        maxWaitDuration: 500ms # How many milliseconds to wait for a thread to become available. 0 means no wait, immediately reject.
        registerHealthIndicator: true
        writableStackTraceEnabled: true # Controls whether exceptions contain a full stack trace.
